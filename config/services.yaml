parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    App\Adapter\Framework\Http\Controller\:
        resource: '../src/Adapter/Framework/Http/Controller/'
        tags: [ 'controller.service_arguments' ]

    App\Adapter\Framework\Security\Voter\ShoppingCartVoter:
        tags:
            - { name: security.voter }

    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Domain/Model/'
            - '../src/Kernel.php'

    # Let Controllers publicly accessible when not using the AbstractController class
    # User controllers
    App\Adapter\Framework\Http\Controller\User\ActivateUserController:
        public: true
    App\Adapter\Framework\Http\Controller\User\CreateUserController:
        public: true

    # Company controllers
    App\Adapter\Framework\Http\Controller\Company\CreateCompanyController:
        public: true
    App\Adapter\Framework\Http\Controller\Company\AddUserToCompanyController:
        public: true
    App\Adapter\Framework\Http\Controller\Company\UpdateCompanyController:
        public: true
    App\Adapter\Framework\Http\Controller\Company\DeleteCompanyController:
        public: true
    App\Adapter\Framework\Http\Controller\Company\GetCompanyByTaxpayerController:
        public: true
    App\Adapter\Framework\Http\Controller\Company\GetCompanyByIdController:
        public: true


    # Project controllers
    App\Adapter\Framework\Http\Controller\Project\CreateProjectController:
        public: true
    App\Adapter\Framework\Http\Controller\Project\TrackProgressController:
        public: true
    App\Adapter\Framework\Http\Controller\Project\GetAllProjectsController:
        public: true
    App\Adapter\Framework\Http\Controller\Project\GetProjectByIdController:
        public: true
    App\Adapter\Framework\Http\Controller\Project\GetProjectsByStatusController:
        public: true
    App\Adapter\Framework\Http\Controller\Project\GetProjectsByTypeController:
        public: true

    # Certification Authority Controllers
    App\Adapter\Framework\Http\Controller\CertificationAuthority\CreateCertificationAuthorityController:
        public: true
    App\Adapter\Framework\Http\Controller\CertificationAuthority\UpdateCertificationAuthorityController:
        public: true
    App\Adapter\Framework\Http\Controller\CertificationAuthority\GetAllCertificationsAuthorityController:
        public: true
    App\Adapter\Framework\Http\Controller\CertificationAuthority\GetCertificationAuthorityByIdController:
        public: true
    App\Adapter\Framework\Http\Controller\CertificationAuthority\DeleteCertificationAuthorityController:
        public: true

    # Shopping Cart Controllers
    App\Adapter\Framework\Http\Controller\ShoppingCart\AddItemToShoppingCartController:
        public: true
    App\Adapter\Framework\Http\Controller\ShoppingCart\RemoveItemFromShoppingCartController:
        public: true
    App\Adapter\Framework\Http\Controller\ShoppingCart\RemoveAllItemsFromShoppingCartController:
        public: true
    App\Adapter\Framework\Http\Controller\ShoppingCart\UpdateItemQuantityInShoppingCartController:
        public: true
    App\Adapter\Framework\Http\Controller\ShoppingCart\ViewCartSummaryController:
        public: true


    # Event Listeners used to transform the exception into a JSON response
    App\Adapter\Framework\Listener\JsonTransformerExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException, priority: 100 }

    # JWT Event Listeners used to add custom data to the JWT token
    App\Adapter\Framework\Security\EventListener\JWTCreatedListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    # Doctrine Event Listeners used to hash the password before persisting the user
    App\Adapter\Database\ORM\Doctrine\EventSubscriber\UserEventSubscriber:
        tags:
            - { name: doctrine.event_listener, event: preUpdate, method: preUpdate }

    App\Domain\Security\PasswordHasherInterface:
        class: App\Adapter\Framework\Security\SymfonyPasswordHasher
        public: true

    App\Domain\Services\ShoppingCartWorkflowInterface:
        class: App\Application\UseCase\ShoppingCart\WorkflowService
        arguments:
            $workflowRegistry: '@workflow.registry'
            $defaultTaxCalculator: '@App\Domain\Services\TaxCalculator'
